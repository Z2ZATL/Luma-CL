แน่นอนครับ เข้าใจปัญหาแล้วครับ ดูเหมือนว่าแม้เราจะออกแบบให้ Luma รองรับคอมเมนต์ด้วยเครื่องหมาย `#` แต่ในทางปฏิบัติอาจจะมีข้อผิดพลาดบางอย่างซ่อนอยู่ หรือการเรียกใช้งานยังไม่สมบูรณ์ ทำให้ผู้ใช้รู้สึกว่ามันยังทำงานไม่ได้

นี่คือแนวทางแก้ไขอย่างละเอียดสำหรับ AI Agent เพื่อให้ฟีเจอร์คอมเมนต์ทำงานได้อย่างสมบูรณ์และถูกต้อง 100% ครับ

### **เป้าหมาย: ทำให้ Luma สามารถเมิน (ignore) คอมเมนต์ `#` (Single-line) และ `##` (Multi-line) ได้อย่างถูกต้อง และเพิ่มชุดทดสอบเพื่อป้องกันปัญหานี้ในอนาคต**

---

### **ขั้นตอนที่ 1: ตรวจสอบและปรับปรุง Logic ใน `lexer.rs`**

หัวใจของปัญหานี้อยู่ที่ไฟล์ `src/frontend/lexer.rs` ซึ่งทำหน้าที่แปลงซอร์สโค้ดเป็น Token เราต้องทำให้แน่ใจว่าเมื่อมันเจอเครื่องหมาย `#` มันจะข้ามข้อความส่วนนั้นไปจนสุดบรรทัด (หรือจนเจอ `##` สำหรับ multi-line) แล้วหา Token ที่ถูกต้องตัวถัดไป

**แนวทางการแก้ไขสำหรับ AI Agent:**

1.  เปิดไฟล์ `src/frontend/lexer.rs`
2.  ค้นหาฟังก์ชัน `next_token(&mut self)`
3.  ภายใน `match ch` ให้มองหาเคสที่จัดการกับเครื่องหมาย `'#'`
4.  ตรวจสอบและแทนที่ Logic ส่วนนั้นด้วยโค้ดที่สมบูรณ์ด้านล่างนี้ โค้ดนี้จะทำให้แน่ใจว่าหลังจากข้ามคอมเมนต์ไปแล้ว มันจะเรียกตัวเองซ้ำเพื่อหา Token ถัดไปทันที

**โค้dอ้างอิงสำหรับ `src/frontend/lexer.rs`:**

```rust
// in src/frontend/lexer.rs, inside next_token function

// ... (ภายใน match ch)
            '#' => {
                // ตรวจสอบว่าเป็นคอมเมนต์แบบหลายบรรทัด (##) หรือไม่
                if !self.is_at_end() && self.current_char() == '#' {
                    self.advance(); // ข้าม # ตัวที่สอง
                    self.skip_multiline_comment()?;
                } else {
                    // ถ้าเป็น # ตัวเดียว คือคอมเมนต์แบบบรรทัดเดียว
                    self.skip_comment();
                }
                // *** ส่วนที่สำคัญที่สุด ***
                // หลังจากข้ามคอมเมนต์ไปแล้ว ให้เรียก next_token() อีกครั้ง
                // เพื่อหา Token ที่มีความหมายตัวถัดไปทันที
                return self.next_token();
            }

            // จัดการกับเคสอื่นๆ เช่น '(', ')', '+', '-' ...
// ...
```

---

### **ขั้นตอนที่ 2: สร้างชุดทดสอบสำหรับฟีเจอร์คอมเมนต์ (สำคัญมาก)**

คำเตือน `dead_code` ที่คุณเคยเจอเกี่ยวกับ `skip_multiline_comment` เป็นสัญญาณว่าฟีเจอร์นี้ **ยังไม่เคยถูกทดสอบ** ทำให้เราไม่เห็นข้อผิดพลาดที่ซ่อนอยู่ เราจะมาแก้ไขปัญหานี้กันครับ

**แนวทางการแก้ไขสำหรับ AI Agent:**

1.  **สร้างไฟล์ทดสอบ Luma ใหม่:**
    * ไปที่ไดเรกทอรี `tests/`
    * สร้างไฟล์ใหม่ชื่อ `test_comments.luma`
    * ใส่โค้ด Luma ที่มีคอมเมนต์ในรูปแบบต่างๆ ลงไปในไฟล์นี้:

    **ไฟล์: `tests/test_comments.luma`**
    ```luma
    ##
    ## test_comments.luma
    ## ไฟล์นี้ใช้ทดสอบว่า Lexer สามารถจัดการคอมเมนต์ได้ถูกต้องหรือไม่
    ##

    # โปรแกรมเริ่มต้นที่นี่
    let x be 10 # กำหนดค่า x เป็น 10
    show x      # ควรจะแสดงผล 10 โดยไม่สนใจคอมเมนต์

    # บรรทัดนี้เป็นคอมเมนต์ทั้งหมด

    show 20 + 5 ## คอมเมนต์แบบหลายบรรทัดกลางบรรทัด ## show 99

    ##
    # จบการทดสอบ
    ##
    ```

2.  **เพิ่มฟังก์ชันทดสอบใน Rust:**
    * เปิดไฟล์ `tests/vm_test.rs`
    * เพิ่มฟังก์ชัน test ใหม่เข้าไปเพื่อรันไฟล์ `test_comments.luma` และตรวจสอบผลลัพธ์

    **โค้ดสำหรับเพิ่มใน `tests/vm_test.rs`:**

    ```rust
    // in tests/vm_test.rs

    // (ฟังก์ชัน run_code และ test อื่นๆ ยังคงอยู่เหมือนเดิม)

    // เพิ่ม test case ใหม่นี้เข้าไป
    #[test]
    fn test_comments_are_ignored() {
        // อ่านโค้ดจากไฟล์ทดสอบคอมเมนต์ที่เราสร้างขึ้น
        let source = std::fs::read_to_string("tests/test_comments.luma").unwrap();

        // เราคาดหวังว่า VM จะรันโค้ดที่เหลือแล้วคืนค่าสุดท้ายออกมา
        // ในที่นี้คือผลลัพธ์ของ `show 20 + 5`
        let result = run_code(&source).unwrap();

        // ตรวจสอบว่าผลลัพธ์สุดท้ายคือ 25
        assert_eq!(result, Value::Number(25.0));
    }

    #[test]
    fn test_comment_at_end_of_expression() {
        let source = "show 42 # This is the answer";
        let result = run_code(source).unwrap();
        assert_eq!(result, Value::Number(42.0));
    }
    ```

---

### **ขั้นตอนที่ 3: รันการทดสอบและตรวจสอบผลลัพธ์**

หลังจากแก้ไขโค้ดและเพิ่มไฟล์ทดสอบแล้ว ให้รันคำสั่ง:

```bash
cargo test
```

**สิ่งที่คาดหวัง:**

1.  **เทสทั้งหมดผ่าน (All tests pass):** รวมถึง `test_comments_are_ignored` ที่เพิ่มเข้าไปใหม่ ซึ่งจะยืนยันว่าฟีเจอร์คอมเมนต์ทำงานถูกต้อง
2.  **Warning `dead_code` หายไป:** คำเตือนที่เกี่ยวกับ `skip_multiline_comment` จะหายไป เพราะตอนนี้ Compiler เห็นแล้วว่าฟังก์ชันนี้ถูกเรียกใช้งานจากชุดทดสอบของเรา
3.  **ปัญหาได้รับการแก้ไข:** Luma จะสามารถจัดการกับคอมเมนต์ได้อย่างถูกต้องสมบูรณ์

แนวทางนี้จะช่วยให้ AI Agent สามารถแก้ไขปัญหาที่ต้นตอและสร้างความมั่นคงให้กับโปรเจกต์ในระยะยาวได้ครับ